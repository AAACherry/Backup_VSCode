库的架构

1-汇编编写的启动文件
startup_stm32f10x_hd.s (hd:high density高密度的,密度表示flash的大小，即容量)
设置堆栈指针、设置PC指针、设置初始化中断向量表、配置系统时钟、调用C库函数_main最终去到C的世界

2-时钟配置文件
system_stm32f10x.c:把外部时钟HSE=8M,经过PLL（锁相环）倍频位72M。锁相环是专门用来倍频的。
当执行完启动文件之后，系统时钟已经配置成72M，所以在main函数的时候，我们不需要再去另外的配置这个系统时钟。

3-外设相关的
stm32f10x.h：实现了内核之外的外设寄存器映射
xxx:GPIO、USRAT、I2C、SPI、FSMC···
stm32f10x_xxx.c(stm32f10x_gpio.c):外设的驱动函数库文件
stm32f10x_xxx.h(stm32f10x_gpio.h):存放外设的初始化结构体、外设初始化结构体成员的参数列表、外设固件库函数的声明
(.h头文件)(【穷举】：表示每一种情况都有描述)


4-内核相关的
内核当中也有外设，如NVIC、systick
符合CMSIS-Cortex:微控制器软件接口标准
core_cm3.h:实现了内核里面外设的寄存器映射
core_cm3.c:内核外设的驱动固件库

NVIC:(嵌套向量中断控制器),与中断相关、SysTick(系统滴答定时器)
misc.h:
misc.c:

5-头文件的配置文件
stm32f10x_conf.h:头文件的头文件
将所有的外设相对头文件stm32f10x_xxx.h都包含在其中
如：
//stm32f10x_usart.h
//stm32f10x_i2c.h
//stm32f10x_spi.h
//stm32f10x_adc.h
//stm32f10x_fsmc.h
...

默认情况下都是被屏蔽掉的，如果想用则把//注释去掉

6-专门存放中断服务函数的c文件
stm32每个外设都有非常多的中断，如果编程的时候用了很多外设，有很多中断的时候，为了方便中断管理，把中断服务函数全部写到一个c文件中
执行程序的时候有可能出现要执行别的紧急程序的情况，就需要先中断执行完别的程序再回来接着运行.
stm32f10x_it.c
stm32f10x_it.h
中断服务函数可以随便放在其他的地方,并非一定要放在stm32f10x_it.c,只是为了方便管理(好看,可读性)才放到其中
操作起来方便，一看就知道系统/程序中写了多少个中断,方便进一步分配每一个中断的优先级。

//<>尖括号去系统安装目录中找,""双引号先在当前自己新建的工程目录下去找,找不到才去keil5软件的根目录下找
#include "stm32f10x.h"  //相当于51单片机中的    #include <reg51.h> 

int main(void)
{
    //  来到这里的时候,系统的时钟已经被配置成72M。不需要自己配置，启动文件中已经配置好了。
}



